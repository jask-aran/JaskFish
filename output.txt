Project Path: /home/jask/JaskFish/test

Source Tree:

```
test
├── utils.py
├── main.py
└── engine.py

```

`/home/jask/JaskFish/test/utils.py`:

```````py
from PySide2.QtWidgets import QApplication
def color_text(text, color_code):
    return f"\033[{color_code}m{text}\033[0m"

def debug_text(text):
    return f"{color_text('DEBUG', '31')} {text}"

def info_text(text):
    return f"{color_text('INFO', '32')}  {text}"

def sending_text(text):
    return f"{color_text('SENDING ', '35')} {text}"

def cleanup(process, thread, app, dev=False):
    if dev:
        print(debug_text("Cleaning up resources..."))
    process.terminate()
    thread.join()
    app.quit()

def get_piece_unicode(piece):
    piece_unicode = {
        'K': '♔', 'Q': '♕', 'R': '♖', 'B': '♗', 'N': '♘', 'P': '♙',
        'k': '♚', 'q': '♛', 'r': '♜', 'b': '♝', 'n': '♞', 'p': '♟'
    }
    return piece_unicode[piece.symbol()]

def center_on_screen(window):
    screen = QApplication.primaryScreen()
    screen_geometry = screen.geometry()
    window_size = window.size()
    x = (screen_geometry.width() - window_size.width()) / 2 + screen_geometry.left()
    y = (screen_geometry.height() - window_size.height()) / 2 + screen_geometry.top()
    window.move(x, y)
```````

`/home/jask/JaskFish/test/main.py`:

```````py
import sys
import subprocess
import queue
import threading
import time

from utils import color_text, debug_text

def engine_output_processor(output_queue, proc):
    while True:
        output = proc.stdout.readline().strip()
        if output == '' and proc.poll() is not None:
            break
        elif output:
            print(color_text('RECIEVED ', '34') + output)

def send_command(proc, command):
    print(color_text('SENDING  ', '32') + command)
    proc.stdin.write(command + "\n")
    proc.stdin.flush()
    
def handle_command_go(proc, fen_string):
    send_command(proc, f"position fen {fen_string}")
    send_command(proc, "go")

def main():
    engine_process = subprocess.Popen(
        ["python3", "engine.py"],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        bufsize=1,
        universal_newlines=True
    )

    engine_output_queue = queue.Queue()
    engine_thread = threading.Thread(target=engine_output_processor, args=(engine_output_queue, engine_process), daemon=True)
    engine_thread.start()
    
    time.sleep(0.5)
    while True:
        command = input("Enter command: ")
        if command.strip().lower() == 'quit':
            send_command(engine_process, 'quit')
            print(debug_text("Quitting..."))
            engine_process.terminate()
            break
        elif command:
            send_command(engine_process, command)
            


if __name__ == "__main__":
    main()
```````

`/home/jask/JaskFish/test/engine.py`:

```````py
import sys
import io
import chess
import threading
import queue
import time

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, line_buffering=True)

print('id name JaskFish')
print('id author Jaskaran Singh')
print('uciok')

def engine_command_processor():
    print("readyok")
    while True:
        # Read input directly from sys.stdin
        command = sys.stdin.readline().strip()
        if command == "quit":
            print('info string Engine shutting down')
            break
        elif command.startswith("go"):
            print(f"{command} received from GUI (GO COMMAND)")
        elif command:
            print(f"{command} received from GUI")
        sys.stdout.flush()

def main():
    engine_command_processor()
    print("test")
    
main()


```````